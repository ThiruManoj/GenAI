# Unique name for this workflow
name: Deploy Changes when when PR is merged

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is closed
      types: [closed]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "master". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ develop ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    deploy-to-production-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
          if: github.event.pull_request.merged == true
          runs-on: ubuntu-latest
          steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v4
              with:
                node-version: '18'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            #- name: 'Read PR Body'
            #  env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
            #    PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
            #  run: |
            #      echo $PR_BODY > ./pr_body.txt
            #      node ./parsePR.js              
            #      TESTS=$(cat testsToRun.txt)       
            #      echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            - name: 'Installing sfdx git delta'
              run: | 
                  sf plugins install sfdx-git-delta

            # Install utilities - yq to parse package.xml and find apex classes and test class names
            - name: Install utilities - yq
              run: |
                pip install yq
                xq --version

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 
                  cat changed-sources/package/package.xml
                  echo
                  echo "--- Apex Tests to be executed ---"
                  export APEX_CLASSES=$(xq . < changed-sources/package/package.xml | jq '.Package.types | [.] | flatten | map(select(.name=="ApexClass")) | .[] | .members | [.] | flatten | map(select(. | index("*") | not)) | map(. | sub("TEST$" ; "") + "TEST")  | unique | join(",")' -r)
                  echo $APEX_CLASSES
     
            # Get the key from Github variables
            - name: Get JWT private token  
              run: echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key

            # Authenticate to the salesforce org using JWT token 
            - name: Authenticate to Salesforce Org using JWT 
              run: sf org login jwt --client-id ${{ secrets.SALESFORCE_CONSUMER_KEY_PROD }} --jwt-key-file server.key --username ${{ secrets.SALESFORCE_USER_NAME_PROD }} --alias JetstarPROD
            
            
            # If the env variable equals all, we run all tests
            - name: 'Deploy delta changes - run all tests'
              run: |
                  sf project deploy start --source-dir "changed-sources/force-app" --ignore-conflicts --test-level RunLocalTests --target-org JetstarPROD --json
